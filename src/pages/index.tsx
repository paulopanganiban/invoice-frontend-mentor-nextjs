import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback } from "react";
import styled from "styled-components";
import data from "../../data.json";
import GenericList from "../components/GenericList";
const Home: NextPage = () => {
  const convertDate = useCallback((date: string) => {
    return new Intl.DateTimeFormat("en-US", {
      dateStyle: "full",
    }).format(new Date(date));
  }, []);
  const convertToMoneyFormat = useCallback((amount: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount);
  }, []);
  const handleOrderStatusColor = useCallback((status: string) => {
    switch (status) {
      case "draft":
        return "draft";
      case "paid":
        return "paid";
      case "pending":
        return "pending";
      default:
        return "draft";
    }
  }, []);
  console.log(data);
  return (
    <div>
      <Head>
        <title>Invoice App - Frontend Mentor Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <S.Main>
        <div className="container">
          <div className="header-text-wrapper">
            <h2 className="header-heading">Invoices</h2>
            <p className="header-details">There are 8 total invoices</p>
          </div>
          <button className="filter-button">
            Filter{" "}
            <span className="filter-arrow-icon-wrapper">
              <Image
                src="/assets/icon-arrow-down.svg"
                alt="arrow"
                objectFit="contain"
                width={12}
                height={12}
              />
            </span>
          </button>
          <button className="add-button">
            <span className="circle" />
            New
          </button>
        </div>
        <div>
          <GenericList
            data={data}
            keyExtractor={({ id }) => id}
            render={(item) => {
              return (
                <div className="invoice-container">
                  <h2 className="invoice-id">
                    <span className="hashtag-text">#</span>
                    {item.id}
                  </h2>
                  <h3 className="customer-name">{item.clientName}</h3>
                  <h3 className="due-date">
                    Due {convertDate(item.paymentDue)}
                  </h3>
                  <div
                    className={`order-status ${handleOrderStatusColor(
                      item.status
                    )}`}
                  >
                    <div
                      className={`order-circle ${handleOrderStatusColor(
                        item.status
                      )}`}
                    />
                    {item.status}
                  </div>
                  <h3 className="total-amount">
                    {convertToMoneyFormat(item.total)}
                  </h3>
                </div>
              );
            }}
          />
        </div>
      </S.Main>
    </div>
  );
};

export default Home;
const S = {
  Main: styled.main`
    margin-top: 4rem;
    .invoice-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr 1fr 1fr;
      align-items: center;
      border: 1px solid transparent;
      border-radius: 8px;
      padding: 1rem 1.5rem;
      margin: 1rem;
      background: ${({ theme }) => theme.background};
      text-decoration: none;
      .total-amount {
        font-size: 1rem;
        font-weight: bold;
      }
      .due-date,
      .invoice-id,
      .customer-name {
        font-size: 0.75rem;
      }
      .invoice-id {
        font-weight: bold;
        .hashtag-text {
          color: rgb(126, 136, 195);
        }
      }
      .customer-name {
        text-align: end;
        color: ${({ theme }) => theme.p};
      }
      .order-status {
        text-transform: capitalize;
        margin-left: auto;
        grid-row: span 2;
        width: 6.5rem;
        height: 2.5rem;
        border-radius: 6px;
        background: rgba(55, 59, 83, 0.06);
        display: flex;
        justify-content: center;
        align-items: center;
        /* add useCallback for status with ENUMS */
        &.draft {
          color: ${({ theme }) => theme.text};
          background: ${({ theme }) => theme.body};
        }
        &.paid {
          color: rgb(51, 214, 159);
          background: rgba(51, 214, 159, 0.06);
        }
        &.pending {
          color: rgb(255, 143, 0);
          background: rgba(255, 143, 0, 0.06);
        }
        .order-circle {
          display: inline-block;
          width: 0.5rem;
          height: 0.5rem;
          margin-right: 0.5rem;
          border-radius: 50%;
          background: rgb(55, 59, 83);
          &.draft {
            background: ${({ theme }) => theme.text};
          }
          &.paid {
            background: rgb(51, 214, 159);
          }
          &.pending {
            background: rgb(255, 143, 0);
          }
        }
      }
    }
    .container {
      display: grid;
      align-items: center;
      justify-content: center;
      grid-template-columns: 0.4fr 0.3fr 0.3fr;
      button {
        cursor: pointer;
        border: none;
        outline: none;
      }
      .header-text-wrapper {
        .header-heading {
          margin-bottom: 0.5rem;
          font-size: 1.25rem;
          color: ${({ theme }) => theme.text};
          font-weight: bold;
          font-size: 2rem;
          line-height: 1.125;
          letter-spacing: -1px;
        }
        .header-details {
          color: ${({ theme }) => theme.p};
          font-size: 0.75rem;
          line-height: 1.125;
          letter-spacing: -0.25px;
        }
      }
      .filter-button {
        margin-left: auto;
        color: ${({ theme }) => theme.text};
        min-width: 120px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 1rem;
        background: none;
        height: 2rem;
        .filter-arrow-icon-wrapper {
          display: inline-block;
        }
      }
      .add-button {
        margin-left: auto;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
        border-radius: 10rem;
        font-size: 0.75rem;
        font-weight: 700;
        line-height: 1.25;
        color: white;
        min-width: 5.875rem;
        max-width: 8rem;
        padding: 0.5rem 1rem 0.5rem 0.5rem;
        background: rgb(124, 93, 250);
        transition: background 0.3s ease 0s, color 0.3s ease 0s;
        .circle {
          display: inline-block;
          position: relative;
          background: white;
          width: 30px;
          height: 30px;
          border-radius: 50%;
          color: rgb(124, 93, 250);
          ::after,
          ::before {
            content: "";
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
          }
          ::after {
            width: 9px;
            height: 2px;
            background: rgb(124, 93, 250);
          }
          ::before {
            width: 2px;
            height: 9px;
            background: rgb(124, 93, 250);
          }
        }
      }
    }
  `,
};
